Project title: Game – Tower of Hanoi solution.

Summary:

- Input: The user defines the numbers they want placed on the first tower (Quantity and numbers themselves).

- Output:

o The numbers placed in ascending order on the first tower.

o Steps on how to move these numbers to the third tower while only using the first, second and third towers and obeying the Tower of Hanoi game rules.

Background:

Our project consists of implementing the solution to the game Tower of Hanoi using numbers. This game is a mathematical puzzle, generally consisting of three towers and a number of disks of different sizes. The user finds themselves with the disks stacked in order per size on the first tower – biggest at the bottom and smallest at the top. The goal of the game is to move the disks from the first tower to the third while obeying the following rules:

- The disks are moved from one tower to another, one disk at a time.

- A disk can only be placed on an empty tower or a larger disk.

- A disk cannot be placed on a smaller one.

- Only towers 1 to 3 can be used.

Description:

In our version of the game, we will use numbers instead of disks. Therefore, the numbers will be placed in ascending order on the first tower. Then our program will show the steps on how to get all the numbers on the third tower while obeying the following rules:

- The numbers are moved from one tower to another, one number at a time.

- A number can only be placed on an empty tower or a larger number.

- A number cannot be placed on a smaller one.

- Only towers 1, 2 and 3 can be used.

Program Core: 

This program will be composed at least 3 parts: 
1. the interface part which use JAVA build-in GUI and funciton as the direct interface between player and program
2. the game body, which composed of the game logic, data manipulaiton using data API, algo for auto_completion , and game statistics. 
3. the data strcuture part which implement the underline concrete data structure for functioning data API  

1.1 the index for interface 
    Jpanes to manage window 
    EventListener for reading action from user and propogate reaction to program 
    paintComponent to change the state of game and reflect user's aciton 
    mouseAdaptor to trach and record mouse movement 
2.1 the index for game body 
    basic game logic: the rule to move disk and the rule to determine an end of game 
    data manipulation: define how each stack to work and combined with rule of logic composed the main body of the game 
    algo for auto_complete: an algo to indicate how to move next next into proper play and also a full auto version which can complete the game by its own. Will use recurion for the task 
    game stati reflect the conpleteion time, and if use full auto can track the memery useage and cpu time 
3.1
    data structure part will use the simplest method, array implementatin to form the fundamental for stack. 
    std API for portability and simplicity 
